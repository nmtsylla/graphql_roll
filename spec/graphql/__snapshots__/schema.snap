"""
Autogenerated input type of CreateRoll
"""
input CreateRollInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dices: DicesInput!
}

"""
Autogenerated return type of CreateRoll
"""
type CreateRollPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  roll: Roll!
}

type Dice {
  dice: String
  value: Int
}

scalar DicesInput

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createRoll(
    """
    Parameters for CreateRoll
    """
    input: CreateRollInput!
  ): CreateRollPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  rolls: [Roll!]!
  rollsConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RollConnection!
}

type Roll {
  createdAt: ISO8601DateTime!
  dices: [Dice!]!
  id: ID!
  rolledAt: ISO8601DateTime
  total: Float
}

"""
The connection type for Roll.
"""
type RollConnection {
  """
  A list of edges.
  """
  edges: [RollEdge]

  """
  A list of nodes.
  """
  nodes: [Roll]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RollEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Roll
}
